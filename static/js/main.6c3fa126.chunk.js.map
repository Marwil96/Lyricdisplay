{"version":3,"sources":["logo.svg","../node_modules/sentiment/languages sync /^/.//.*//index$","components/Card.js","components/LyricsView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./en/index","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","Object","resolve","Card","_this","this","track","props","react_default","a","createElement","className","onClick","src","album_coverart_100x100","artist_name","track_name","album_name","Component","defaultOptions","loop","autoplay","animationData","require","rendererSettings","preserveAspectRatio","LyricsView","state","attitude","loading","height","window","innerHeight","dist_default","options","width","isStopped","isPaused","lyrics","console","log","result","Sentiment","analyze","score","time","moment","utc","track_length","format","date","Date","first_release_date","checkAttitude","_this2","style","loadingSpinner","noContent","renderStatsContainer","heroku","apikey","App","data","trackList","inputValue","lyricsViewStyle","selectedSong","loadingLyrics","loadingSongs","term","axios","get","then","res","setState","message","body","track_list","catch","err","trackId","_this3","lyrics_body","event","target","value","searchForSong","getLyrics","_this4","components_LyricsView","closeLyricsView","bind","type","placeholder","onChange","handleChange","renderAlbumCovers","components_Card","artistClick","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c3fa126.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var map = {\n\t\"./en/index\": 83\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 211;","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Card extends Component {\n  render() {\n    const track = this.props.track.track\n    return (\n     <div className=\"card\" onClick={() => {this.props.onClick(track)}}>\n        <img src={track.album_coverart_100x100} />     \n        <h2>{track.artist_name} </h2>\n        <h3>{track.track_name} </h3>\n        <h3>{track.album_name} </h3>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport Sentiment from 'sentiment';\nimport { format } from 'date-fns';\nimport moment from 'moment';\nimport Lottie from 'react-lottie';\n\nconst defaultOptions = {\n      loop: true,\n      autoplay: true, \n      animationData: require('../img/data.json'),\n      rendererSettings: {\n        preserveAspectRatio: 'xMidYMid slice'\n      }\n    };\n\nclass LyricsView extends Component {\n    state= {\n      attitude: \"undefined\"\n    }\n\n    loadingSpinner(loading) {\n    var height = (window.innerHeight/100) * 100;\n    if(loading === true) {\n      // return (<h1> Loading </h1>)\n      return (\n        <div className=\"animationContainerLyrics\"> \n        <Lottie options={defaultOptions}\n              height={height}\n              width={400}\n              isStopped={this.state.isStopped}\n              isPaused={this.state.isPaused}/>\n      </div> )\n    }\n    else {\n      return null\n    }\n  }\n  noContent(lyrics) {\n    if(lyrics === \"error\") {\n      console.log(\"ly\")\n      return (\n        <div className=\"lyricsLoadingContainer\">\n          <img src=\"https://media1.tenor.com/images/7f1d9dfb496694a771a9bf9b96f3662d/tenor.gif?itemid=5943128\" />\n          <h1> Lyrics not found </h1>\n        </div>\n        )\n    }\n  }\n  checkAttitude(lyrics) {\n  var sentiment = new Sentiment();\n    var result = sentiment.analyze(lyrics);\n    console.log(result); \n    if(result.score > 1) {\n      return <div className=\"informationContainer\"><h3> Attitude </h3> <h1> Happy </h1></div>\n    } else if(result.score < -1) {\n      return <div className=\"informationContainer\"><h3> Attitude </h3> <h1> Sad </h1></div>\n    } else {\n      return null\n    }\n  }\n  renderStatsContainer(lyrics) {\n    const track = this.props.track;\n   const time = moment.utc(track.track_length*1000).format('mm:ss');\n   var date = format( new Date(track.first_release_date),'MM/DD/YY');\n    console.log(time)\n    if(lyrics === \"error\" || this.props.loading === true) {\n      return null\n    } else if(date === \"invalid date\") {\n      return (\n         <div className=\"statsContainer\">\n            <div className=\"informationContainer\"><h3> Length </h3> <h1> {time} </h1> </div> \n           {this.checkAttitude(lyrics)}\n            <div className=\"informationContainer\"><h3> Release Date </h3> <h1> For a long time ago </h1> </div> \n          </div>\n        )\n    }\n    else  {\n    return (\n      <div className=\"statsContainer\">\n            <div className=\"informationContainer\"><h3> Length </h3> <h1> {time} </h1> </div> \n           {this.checkAttitude(lyrics)}\n            <div className=\"informationContainer\"><h3> Release Date </h3> <h1> {date} </h1> </div> \n          </div>\n      )\n    }\n  }\n  render() {\n    console.log(\"LyricsView\", this.props.lyrics)\n    const track = this.props.track;\n    console.log(track)\n    return (\n     <div className={this.props.style}>\n       <div className=\"lyricsContainer\">\n        <h4 className=\"closeWindow\" onClick={() => {this.props.onClick()}}> close </h4>\n         <div> \n         {this.loadingSpinner(this.props.loading)}\n         {this.noContent(this.props.lyrics)}\n         <h2>{track.artist_name} </h2>\n          <h3>{track.track_name} </h3>\n          <h3>{track.album_name} </h3>\n          </div>\n          <p> {this.props.lyrics} </p> \n          </div>\n          {this.renderStatsContainer(this.props.lyrics)}\n      </div>\n    );\n  }\n}\n\nexport default LyricsView;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport Lottie from 'react-lottie';\nimport * as animationData from './img/checked_done_.json';\n\nimport Card from './components/Card.js';\nimport LyricsView from './components/LyricsView.js';\n\nvar heroku = \"https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/\";\nvar apikey = \"apikey=94570a0bd8689a580e15db8fd9de328d\";\n\nconst defaultOptions = {\n      loop: true,\n      autoplay: true, \n      animationData: require('./img/data.json'),\n      rendererSettings: {\n        preserveAspectRatio: 'xMidYMid slice'\n      }\n    };\n\nclass App extends Component {\n  state = {\n    data: {},\n    lyrics: \"\",\n    trackList: [],\n    inputValue:\"\",\n    lyricsViewStyle: \"lyricsView\",\n    selectedSong: {},\n    loadingLyrics:false,\n    loadingSongs: false,\n    isStopped: false, \n    isPaused: false,\n    isStopped: false, \n    isPaused: false\n  }\n\n  renderAlbumCovers(track) {\n    track.map(track =>{\n    return (\n      <div>\n        <h1> Woha </h1>\n        <h2>{track.album_name} </h2>\n        <h2>{track.artist_name} </h2>\n        <h3>{track.track_name} </h3>\n        <img src={track.album_coverart_100x100} />\n      </div>\n      )\n    })\n  }\n  searchForSong(term) {\n    axios.get(heroku + `track.search?q_track_artist=`+ term + `&page_size=12&page=1&f_has_lyrics=1&f_lyrics_language=en&s_track_rating=desc&`+ apikey)\n      .then(res => {\n        this.setState({\n          data: res.data,\n          trackList:res.data.message.body.track_list,\n          loadingSongs: false\n        })\n      })\n      .catch(err => console.log(\"error\",err))\n  }\n  getLyrics(trackId) {\n    axios.get(heroku + `matcher.lyrics.get?format=json&callback=callback&q_track=`+ trackId.track_name +`&`+ apikey)\n      .then(res => {\n        this.setState({\n          data: res.data,\n          lyrics:res.data.message.body.lyrics.lyrics_body,\n          selectedSong:trackId,\n          loadingLyrics: false\n        })\n      })\n      .catch(err => {\n        console.log(\"error\",err)\n        this.setState({\n          lyrics:\"error\",\n          loadingLyrics: false\n        })\n      })\n  }\n  handleChange(event) {\n    this.setState({\n      inputValue: event.target.value,\n      loadingSongs:true\n    })\n    this.searchForSong(event.target.value)\n  }\n  artistClick(trackId) {\n    this.getLyrics(trackId)\n     this.setState({\n          lyricsViewStyle: \"lyricsView lyricsViewDisplayed\",\n          loadingLyrics: true\n        })\n  }\n  closeLyricsView() {\n    this.setState({\n          lyrics:\"\",\n          lyricsViewStyle: \"lyricsView lyricsViewClosed\",\n          selectedSong:{}\n        })\n  }\n  loadingSpinner(loading) {\n    if(loading === true) {\n      // return (<h1 className=\"loadingHeader\"> Loading </h1>)\n      return (\n        <div className=\"animationContainer\"> \n        <Lottie options={defaultOptions}\n              height={400}\n              width={400}\n              isStopped={this.state.isStopped}\n              isPaused={this.state.isPaused}/>\n      </div> \n        )\n    }\n    else {\n      return null\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">       \n      <LyricsView style={this.state.lyricsViewStyle} track={this.state.selectedSong} lyrics={this.state.lyrics} onClick={this.closeLyricsView.bind(this)} loading={this.state.loadingLyrics}/>\n      <h1 className=\"header\"> Search for lyrics </h1>\n       <input type=\"text\" placeholder=\"Type in song title\" onChange={this.handleChange.bind(this)} />\n        {this.renderAlbumCovers(this.state.trackList)}\n        {this.loadingSpinner(this.state.loadingSongs)}\n        <div className=\"cardContainer\">\n        { this.state.trackList.map(track =>{\n         return <Card track={track} onClick={this.artistClick.bind(this)} />\n        })}\n        </div>\n       <h3>{this.state.lyrics}</h3>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}